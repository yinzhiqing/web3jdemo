package a.com;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class PDCERC721IpfsManager extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50613d2e806100206000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c806370a0823111610167578063b9a48a22116100ce578063d547741f11610087578063d547741f146105aa578063e622ae8e146105bd578063e63ab1e9146105d0578063e985e9c5146105d8578063ee857a5a146105eb578063f77ee79d146105fe576102a0565b8063b9a48a2214610543578063c58343ef14610556578063c87b56dd14610569578063ca15c8731461057c578063d0def5211461058f578063d5391393146105a2576102a0565b8063a217fddf11610120578063a217fddf146104dc578063a22cb465146104e4578063a3abd0c6146104f7578063a6487c531461050a578063acf79c211461051d578063b88d4fde14610530576102a0565b806370a082311461048057806370c18199146104935780638456cb59146104a65780639010d07c146104ae57806391d14854146104c157806395d89b41146104d4576102a0565b8063248a9ca31161020b57806342842e0e116101c457806342842e0e1461041957806342966c681461042c5780634f6ccce71461043f5780635c975abb146104525780635cbca5901461045a5780636352211e1461046d576102a0565b8063248a9ca3146103b25780632f2ff15d146103c55780632f745c59146103d857806336568abe146103eb5780633dcc5af6146103fe5780633f4ba83a14610411576102a0565b8063095ea7b31161025d578063095ea7b3146103495780630ebd98301461035e5780631291af401461037157806315a855321461038457806318160ddd1461039757806323b872dd1461039f576102a0565b806301ffc9a7146102a557806305a2f204146102ce57806306fdde03146102ee578063081812fc14610303578063083b84ee146103235780630855a23c14610336575b600080fd5b6102b86102b3366004613043565b610611565b6040516102c5919061326d565b60405180910390f35b6102e16102dc366004612e34565b610624565b6040516102c59190613278565b6102f661067a565b6040516102c591906132b0565b610316610311366004612fe8565b61070c565b6040516102c5919061321c565b610316610331366004612fe8565b610758565b6102e1610344366004612fbf565b61079c565b61035c610357366004612fbf565b610841565b005b6102e161036c366004612fbf565b6108d9565b6102e161037f366004612fbf565b610911565b610316610392366004612fe8565b6109b3565b6102e16109f7565b61035c6103ad366004612e80565b6109fd565b6102e16103c0366004612fe8565b610a35565b61035c6103d3366004613000565b610a4a565b6102e16103e6366004612fbf565b610a6c565b61035c6103f9366004613000565b610abe565b6102e161040c366004612fe8565b610ae0565b61035c610b1b565b61035c610427366004612e80565b610b5b565b61035c61043a366004612fe8565b610b76565b6102e161044d366004612fe8565b610ba9565b6102b8610c04565b6102e1610468366004612e34565b610c0e565b61031661047b366004612fe8565b610c2a565b6102e161048e366004612e34565b610c5f565b6102f66104a1366004612fe8565b610ca3565b61035c610d70565b6103166104bc366004613022565b610dae565b6102b86104cf366004613000565b610dcd565b6102f6610df8565b6102e1610e07565b61035c6104f2366004612f34565b610e0c565b6102f6610505366004612fe8565b610eda565b61035c61051836600461307b565b610f1b565b61035c61052b3660046130ff565b610f9e565b61035c61053e366004612ebb565b61108b565b61035c6105513660046130ff565b6110c4565b6102f6610564366004612fe8565b6111c7565b6102f6610577366004612fe8565b6111f4565b6102e161058a366004612fe8565b611276565b61035c61059d366004612f6e565b61128d565b6102e16114ee565b61035c6105b8366004613000565b611512565b6102e16105cb366004612e34565b61151c565b6102e1611571565b6102b86105e6366004612e4e565b611583565b61035c6105f93660046130ff565b6115b1565b6102f661060c366004612fe8565b6116b0565b600061061c826116f6565b90505b919050565b600061065d6040518060400160405280601681526020017562616c616e63654f664f776e6572526573706f6e736560501b81525061171b565b506001600160a01b031660009081526101ce602052604090205490565b606060c9805461068990613c16565b80601f01602080910402602001604051908101604052809291908181526020018280546106b590613c16565b80156107025780601f106106d757610100808354040283529160200191610702565b820191906000526020600020905b8154815290600101906020018083116106e557829003601f168201915b5050505050905090565b60006107178261175b565b61073c5760405162461bcd60e51b8152600401610733906137ad565b60405180910390fd5b50600090815260cd60205260409020546001600160a01b031690565b60006107638261175b565b61077f5760405162461bcd60e51b8152600401610733906137ad565b5060009081526101c560205260409020546001600160a01b031690565b60006107dc6040518060400160405280601a81526020017f746f6b656e4f664f776e6572526571756573744279496e64657800000000000081525061171b565b6001600160a01b03831660009081526101cc602052604090205482106108145760405162461bcd60e51b8152600401610733906136f3565b506001600160a01b03821660009081526101cb602090815260408083208484529091529020545b92915050565b600061084c82610c2a565b9050806001600160a01b0316836001600160a01b031614156108805760405162461bcd60e51b815260040161073390613891565b806001600160a01b0316610892611778565b6001600160a01b031614806108ae57506108ae816105e6611778565b6108ca5760405162461bcd60e51b815260040161073390613603565b6108d4838361177c565b505050565b6001600160a01b03821660009081526101cc602052604081205482106108145760405162461bcd60e51b815260040161073390613a97565b60006109516040518060400160405280601b81526020017f746f6b656e4f664f776e6572526573706f6e73654279496e646578000000000081525061171b565b6001600160a01b03831660009081526101ce602052604090205482106109895760405162461bcd60e51b8152600401610733906139b3565b506001600160a01b039190911660009081526101cd60209081526040808320938352929052205490565b60006109be8261175b565b6109da5760405162461bcd60e51b8152600401610733906137ad565b5060009081526101cf60205260409020546001600160a01b031690565b60fd5490565b610a0e610a08611778565b826117ea565b610a2a5760405162461bcd60e51b8152600401610733906138d2565b6108d483838361186f565b60009081526065602052604090206001015490565b610a54828261199c565b60008281526097602052604090206108d490826119c0565b6000610a7783610c5f565b8210610a955760405162461bcd60e51b8152600401610733906133b3565b506001600160a01b0391909116600090815260fb60209081526040808320938352929052205490565b610ac882826119d5565b60008281526097602052604090206108d49082611a1b565b6000610aeb8261175b565b610b075760405162461bcd60e51b8152600401610733906137ad565b5060009081526101d0602052604090205490565b610b35600080516020613cd98339815191526104cf611778565b610b515760405162461bcd60e51b815260040161073390613ac4565b610b59611a30565b565b6108d48383836040518060200160405280600081525061108b565b610b81610a08611778565b610b9d5760405162461bcd60e51b815260040161073390613a47565b610ba681611a9f565b50565b6000610bb36109f7565b8210610bd15760405162461bcd60e51b815260040161073390613923565b60fd8281548110610bf257634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b61015f5460ff1690565b6001600160a01b031660009081526101cc602052604090205490565b600081815260cb60205260408120546001600160a01b03168061061c5760405162461bcd60e51b8152600401610733906136aa565b60006001600160a01b038216610c875760405162461bcd60e51b815260040161073390613660565b506001600160a01b0316600090815260cc602052604090205490565b6060610cd16040518060400160405280600b81526020016a676574526573706f6e736560a81b81525061171b565b60008281526101c8602052604090208054610ceb90613c16565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1790613c16565b8015610d645780601f10610d3957610100808354040283529160200191610d64565b820191906000526020600020905b815481529060010190602001808311610d4757829003601f168201915b50505050509050919050565b610d8a600080516020613cd98339815191526104cf611778565b610da65760405162461bcd60e51b815260040161073390613487565b610b59611b23565b6000828152609760205260408120610dc69083611b7f565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ca805461068990613c16565b600081565b610e14611778565b6001600160a01b0316826001600160a01b03161415610e455760405162461bcd60e51b815260040161073390613528565b8060ce6000610e52611778565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610e96611778565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ece919061326d565b60405180910390a35050565b6060610ee58261175b565b610f015760405162461bcd60e51b8152600401610733906137ad565b60008281526101c7602052604090208054610ceb90613c16565b600054610100900460ff1680610f34575060005460ff16155b610f505760405162461bcd60e51b81526004016107339061372a565b600054610100900460ff16158015610f7b576000805460ff1961ff0019909116610100171660011790555b610f86848484611b8b565b8015610f98576000805461ff00191690555b50505050565b610fc760405180604001604052806008815260200167726573706f6e736560c01b81525061171b565b6000610fd1611778565b60008581526101c560205260409020549091506001600160a01b0316610ff882828761186f565b611039828686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c4092505050565b84611042611778565b6001600160a01b03167fe50abff2177162dc4a5ce740e492ce4415d6034cd9542f17cad7aa71aa941924868660405161107c929190613281565b60405180910390a35050505050565b61109c611096611778565b836117ea565b6110b85760405162461bcd60e51b8152600401610733906138d2565b610f9884848484611cf5565b6110f16040518060400160405280600c81526020016b757064617465537570706c7960a01b81525061171b565b6110fa8361175b565b6111165760405162461bcd60e51b8152600401610733906137ad565b600061112184610c2a565b9050806001600160a01b0316611135611778565b6001600160a01b03161461115b5760405162461bcd60e51b81526004016107339061396f565b60008481526101c960205260409020611175908484612bf8565b508361117f611778565b6001600160a01b03167f98ead35152dddfb3343ee735fd6a142c70f56ef3180b3d0edce3da22764d00a485856040516111b9929190613281565b60405180910390a350505050565b6060610f016040518060400160405280600a81526020016919d95d14995c5d595cdd60b21b81525061171b565b60606111ff8261175b565b61121b5760405162461bcd60e51b815260040161073390613842565b6000611225611d28565b905060008151116112455760405180602001604052806000815250610dc6565b8061124f84611d38565b604051602001611260929190613178565b6040516020818303038152906040529392505050565b600081815260976020526040812061061c90611e53565b6112b97f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104cf611778565b6112d55760405162461bcd60e51b8152600401610733906139ea565b6112e9836112e46101c3611e5a565b611e5e565b81816101c760006112fb6101c3611e5a565b81526020019081526020016000209190611316929190612bf8565b5061131f611778565b6101c5600061132f6101c3611e5a565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550326101cf60006113726101c3611e5a565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550426101d060006113b56101c3611e5a565b81526020810191909152604001600020556113d16101c3611e5a565b6101cb60006113de611778565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101cc600061140d611778565b6001600160a01b03166001600160a01b031681526020019081526020016000205481526020019081526020016000208190555060016101cc600061144f611778565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461147e9190613b71565b9091555061148f90506101c3611e5a565b836001600160a01b03166114a1611778565b6001600160a01b03167fbdbdb0ef6b2ec0ceb8d54d907931d80b12c13465c6d071c52bbf024a1ce0e4de85856040516114db929190613281565b60405180910390a46108d46101c3611f3d565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610ac88282611f46565b60006115546040518060400160405280601581526020017418985b185b98d953d993dddb995c94995c5d595cdd605a1b81525061171b565b506001600160a01b031660009081526101cc602052604090205490565b600080516020613cd983398151915281565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b6115e06040518060400160405280600e81526020016d757064617465526573706f6e736560901b81525061171b565b60006115eb84610c2a565b9050806001600160a01b03166115ff611778565b6001600160a01b0316146116255760405162461bcd60e51b81526004016107339061396f565b61166d611630611778565b8585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c4092505050565b83611676611778565b6001600160a01b03167fe50abff2177162dc4a5ce740e492ce4415d6034cd9542f17cad7aa71aa94192485856040516111b9929190613281565b60606116dc60405180604001604052806009815260200168676574537570706c7960b81b81525061171b565b60008281526101c9602052604090208054610ceb90613c16565b60006001600160e01b0319821663780e9d6360e01b148061061c575061061c82611f65565b6101d18160405161172c919061315c565b9081526040519081900360200190205460ff16610ba65760405162461bcd60e51b8152600401610733906135ab565b600090815260cb60205260409020546001600160a01b0316151590565b3390565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906117b182610c2a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006117f58261175b565b6118115760405162461bcd60e51b81526004016107339061355f565b600061181c83610c2a565b9050806001600160a01b0316846001600160a01b031614806118575750836001600160a01b031661184c8461070c565b6001600160a01b0316145b8061186757506118678185611583565b949350505050565b826001600160a01b031661188282610c2a565b6001600160a01b0316146118a85760405162461bcd60e51b8152600401610733906137f9565b6001600160a01b0382166118ce5760405162461bcd60e51b8152600401610733906134e4565b6118d9838383611fa5565b6118e460008261177c565b6001600160a01b038316600090815260cc6020526040812080546001929061190d908490613bbc565b90915550506001600160a01b038216600090815260cc6020526040812080546001929061193b908490613b71565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6119a582610a35565b6119b6816119b1611778565b611fb0565b6108d48383612014565b6000610dc6836001600160a01b03841661209b565b6119dd611778565b6001600160a01b0316816001600160a01b031614611a0d5760405162461bcd60e51b815260040161073390613b22565b611a1782826120e5565b5050565b6000610dc6836001600160a01b03841661216a565b611a38610c04565b611a545760405162461bcd60e51b815260040161073390613385565b61015f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611a88611778565b604051611a95919061321c565b60405180910390a1565b60008181526101c760205260408120611ab791612c7c565b60008181526101c860205260408120611acf91612c7c565b60008181526101c960205260408120611ae791612c7c565b60008181526101c56020908152604080832080546001600160a01b03199081169091556101c690925290912080549091169055610ba681612281565b611b2b610c04565b15611b485760405162461bcd60e51b8152600401610733906135d9565b61015f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a88611778565b6000610dc68383612328565b600054610100900460ff1680611ba4575060005460ff16155b611bc05760405162461bcd60e51b81526004016107339061372a565b600054610100900460ff16158015611beb576000805460ff1961ff0019909116610100171660011790555b611bf3612381565b611bfb612381565b611c03612381565b611c0b612381565b611c1584846123f5565b611c1d612381565b611c25612381565b611c2d612493565b611c35612381565b610f86848484612512565b611c498261175b565b611c655760405162461bcd60e51b8152600401610733906137ad565b60008281526101c8602090815260409091208251611c8592840190612cb8565b5060008281526101c66020908152604080832080546001600160a01b0319166001600160a01b0388169081179091558084526101cd83528184206101ce808552838620805487529185529285208790559084529152805460019290611ceb908490613b71565b9091555050505050565b611d0084848461186f565b611d0c848484846125df565b610f985760405162461bcd60e51b8152600401610733906133fe565b60606101c4805461068990613c16565b606081611d5d57506040805180820190915260018152600360fc1b602082015261061f565b8160005b8115611d875780611d7181613c51565b9150611d809050600a83613b89565b9150611d61565b60008167ffffffffffffffff811115611db057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611dda576020820181803683370190505b5090505b841561186757611def600183613bbc565b9150611dfc600a86613c6c565b611e07906030613b71565b60f81b818381518110611e2a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611e4c600a86613b89565b9450611dde565b600061061c825b5490565b6001600160a01b038216611e845760405162461bcd60e51b815260040161073390613778565b611e8d8161175b565b15611eaa5760405162461bcd60e51b815260040161073390613450565b611eb660008383611fa5565b6001600160a01b038216600090815260cc60205260408120805460019290611edf908490613b71565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b611f4f82610a35565b611f5b816119b1611778565b6108d483836120e5565b60006001600160e01b031982166380ac58cd60e01b1480611f9657506001600160e01b03198216635b5e139f60e01b145b8061061c575061061c826126fa565b6108d483838361271f565b611fba8282610dcd565b611a1757611fd2816001600160a01b0316601461274f565b611fdd83602061274f565b604051602001611fee9291906131a7565b60408051601f198184030181529082905262461bcd60e51b8252610733916004016132b0565b61201e8282610dcd565b611a175760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612057611778565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006120a78383612901565b6120dd5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561083b565b50600061083b565b6120ef8282610dcd565b15611a175760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19169055612126611778565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000818152600183016020526040812054801561227757600061218e600183613bbc565b85549091506000906121a290600190613bbc565b905060008660000182815481106121c957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106121fa57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526001890190915260409020849055865487908061223b57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061083b565b600091505061083b565b600061228c82610c2a565b905061229a81600084611fa5565b6122a560008361177c565b6001600160a01b038116600090815260cc602052604081208054600192906122ce908490613bbc565b9091555050600082815260cb602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b8154600090821061234b5760405162461bcd60e51b8152600401610733906132c3565b82600001828154811061236e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600054610100900460ff168061239a575060005460ff16155b6123b65760405162461bcd60e51b81526004016107339061372a565b600054610100900460ff161580156123e1576000805460ff1961ff0019909116610100171660011790555b8015610ba6576000805461ff001916905550565b600054610100900460ff168061240e575060005460ff16155b61242a5760405162461bcd60e51b81526004016107339061372a565b600054610100900460ff16158015612455576000805460ff1961ff0019909116610100171660011790555b82516124689060c9906020860190612cb8565b50815161247c9060ca906020850190612cb8565b5080156108d4576000805461ff0019169055505050565b600054610100900460ff16806124ac575060005460ff16155b6124c85760405162461bcd60e51b81526004016107339061372a565b600054610100900460ff161580156124f3576000805460ff1961ff0019909116610100171660011790555b61015f805460ff191690558015610ba6576000805461ff001916905550565b600054610100900460ff168061252b575060005460ff16155b6125475760405162461bcd60e51b81526004016107339061372a565b600054610100900460ff16158015612572576000805460ff1961ff0019909116610100171660011790555b8151612586906101c4906020850190612cb8565b506125996000612594611778565b612919565b6125c57f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6612594611778565b610f86600080516020613cd9833981519152612594611778565b60006125f3846001600160a01b0316612923565b156126ef57836001600160a01b031663150b7a0261260f611778565b8786866040518563ffffffff1660e01b81526004016126319493929190613230565b602060405180830381600087803b15801561264b57600080fd5b505af192505050801561267b575060408051601f3d908101601f191682019092526126789181019061305f565b60015b6126d5573d8080156126a9576040519150601f19603f3d011682016040523d82523d6000602084013e6126ae565b606091505b5080516126cd5760405162461bcd60e51b8152600401610733906133fe565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611867565b506001949350505050565b60006001600160e01b03198216635a05180f60e01b148061061c575061061c82612929565b61272a83838361294e565b612732610c04565b156108d45760405162461bcd60e51b81526004016107339061333a565b6060600061275e836002613b9d565b612769906002613b71565b67ffffffffffffffff81111561278f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156127b9576020820181803683370190505b509050600360fc1b816000815181106127e257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061281f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612843846002613b9d565b61284e906001613b71565b90505b60018111156128e2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061289057634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106128b457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936128db81613bff565b9050612851565b508315610dc65760405162461bcd60e51b815260040161073390613305565b60009081526001919091016020526040902054151590565b610a5482826129d7565b3b151590565b60006001600160e01b03198216637965db0b60e01b148061061c575061061c826129e1565b6129598383836108d4565b6001600160a01b03831661297557612970816129fa565b612998565b816001600160a01b0316836001600160a01b031614612998576129988382612a3e565b6001600160a01b0382166129b4576129af81612adb565b6108d4565b826001600160a01b0316826001600160a01b0316146108d4576108d48282612bb4565b611a178282612014565b6001600160e01b031981166301ffc9a760e01b14919050565b60fd8054600083815260fe60205260408120829055600182018355919091527f9346ac6dd7de6b96975fec380d4d994c4c12e6a8897544f22915316cc6cca2800155565b60006001612a4b84610c5f565b612a559190613bbc565b600083815260fc6020526040902054909150808214612aa8576001600160a01b038416600090815260fb60209081526040808320858452825280832054848452818420819055835260fc90915290208190555b50600091825260fc602090815260408084208490556001600160a01b03909416835260fb81528383209183525290812055565b60fd54600090612aed90600190613bbc565b600083815260fe602052604081205460fd8054939450909284908110612b2357634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060fd8381548110612b5257634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260fe909152604080822084905585825281205560fd805480612b9857634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612bbf83610c5f565b6001600160a01b03909316600090815260fb60209081526040808320868452825280832085905593825260fc9052919091209190915550565b828054612c0490613c16565b90600052602060002090601f016020900481019282612c265760008555612c6c565b82601f10612c3f5782800160ff19823516178555612c6c565b82800160010185558215612c6c579182015b82811115612c6c578235825591602001919060010190612c51565b50612c78929150612d2c565b5090565b508054612c8890613c16565b6000825580601f10612c9a5750610ba6565b601f016020900490600052602060002090810190610ba69190612d2c565b828054612cc490613c16565b90600052602060002090601f016020900481019282612ce65760008555612c6c565b82601f10612cff57805160ff1916838001178555612c6c565b82800160010185558215612c6c579182015b82811115612c6c578251825591602001919060010190612d11565b5b80821115612c785760008155600101612d2d565b600067ffffffffffffffff80841115612d5c57612d5c613cac565b604051601f8501601f19908116603f01168101908282118183101715612d8457612d84613cac565b81604052809350858152868686011115612d9d57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461061f57600080fd5b60008083601f840112612ddf578182fd5b50813567ffffffffffffffff811115612df6578182fd5b602083019150836020828501011115612e0e57600080fd5b9250929050565b600082601f830112612e25578081fd5b610dc683833560208501612d41565b600060208284031215612e45578081fd5b610dc682612db7565b60008060408385031215612e60578081fd5b612e6983612db7565b9150612e7760208401612db7565b90509250929050565b600080600060608486031215612e94578081fd5b612e9d84612db7565b9250612eab60208501612db7565b9150604084013590509250925092565b60008060008060808587031215612ed0578081fd5b612ed985612db7565b9350612ee760208601612db7565b925060408501359150606085013567ffffffffffffffff811115612f09578182fd5b8501601f81018713612f19578182fd5b612f2887823560208401612d41565b91505092959194509250565b60008060408385031215612f46578182fd5b612f4f83612db7565b915060208301358015158114612f63578182fd5b809150509250929050565b600080600060408486031215612f82578283fd5b612f8b84612db7565b9250602084013567ffffffffffffffff811115612fa6578283fd5b612fb286828701612dce565b9497909650939450505050565b60008060408385031215612fd1578182fd5b612fda83612db7565b946020939093013593505050565b600060208284031215612ff9578081fd5b5035919050565b60008060408385031215613012578182fd5b82359150612e7760208401612db7565b60008060408385031215613034578182fd5b50508035926020909101359150565b600060208284031215613054578081fd5b8135610dc681613cc2565b600060208284031215613070578081fd5b8151610dc681613cc2565b60008060006060848603121561308f578081fd5b833567ffffffffffffffff808211156130a6578283fd5b6130b287838801612e15565b945060208601359150808211156130c7578283fd5b6130d387838801612e15565b935060408601359150808211156130e8578283fd5b506130f586828701612e15565b9150509250925092565b600080600060408486031215613113578081fd5b83359250602084013567ffffffffffffffff811115612fa6578182fd5b60008151808452613148816020860160208601613bd3565b601f01601f19169290920160200192915050565b6000825161316e818460208701613bd3565b9190910192915050565b6000835161318a818460208801613bd3565b83519083019061319e818360208801613bd3565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516131df816017850160208801613bd3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613210816028840160208801613bd3565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061326390830184613130565b9695505050505050565b901515815260200190565b90815260200190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b600060208252610dc66020830184613130565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252603e908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d75737420686176652070617573657220726f6c6520746f2070617573650000606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526014908201527334b73a32b93330b1b29034b99031b637b9b2b21760611b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252601b908201527f7265717565737420696e646578206f7574206f6620626f756e64730000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526024908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152633bb732b960e11b606082015260800190565b6020808252601c908201527f726573706f6e736520696e646578206f7574206f6620626f756e647300000000604082015260600190565b6020808252603d908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d7573742068617665206d696e74657220726f6c6520746f206d696e74000000606082015260800190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201526f1b995c881b9bdc88185c1c1c9bdd995960821b606082015260800190565b602080825260139082015272696e646578206f7574206f6620626f756e647360681b604082015260600190565b602080825260409082018190527f4552433732315072657365744d696e7465725061757365724175746f49643a20908201527f6d75737420686176652070617573657220726f6c6520746f20756e7061757365606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b60008219821115613b8457613b84613c80565b500190565b600082613b9857613b98613c96565b500490565b6000816000190483118215151615613bb757613bb7613c80565b500290565b600082821015613bce57613bce613c80565b500390565b60005b83811015613bee578181015183820152602001613bd6565b83811115610f985750506000910152565b600081613c0e57613c0e613c80565b506000190190565b600281046001821680613c2a57607f821691505b60208210811415613c4b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c6557613c65613c80565b5060010190565b600082613c7b57613c7b613c96565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ba657600080fdfe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220b1fcde682cc1a6dd339c4ddc183c2634e1e9ab98a1bdceff2438ffa6fdab2fd664736f6c63430008010033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_PAUSER_ROLE = "PAUSER_ROLE";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFOWNERMINT = "balanceOfOwnerMint";

    public static final String FUNC_BALANCEOFOWNERREQUEST = "balanceOfOwnerRequest";

    public static final String FUNC_BALANCEOFOWNERRESPONSE = "balanceOfOwnerResponse";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_DATASOFTOKEN = "datasOfToken";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETREQUEST = "getRequest";

    public static final String FUNC_GETRESPONSE = "getResponse";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETROLEMEMBER = "getRoleMember";

    public static final String FUNC_GETROLEMEMBERCOUNT = "getRoleMemberCount";

    public static final String FUNC_GETSUPPLY = "getSupply";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_RESPONSE = "response";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SENDEROFTOKEN = "senderOfToken";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SINGEROFTOKEN = "singerOfToken";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TIMESTAMPOFTOKEN = "timestampOfToken";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENOFOWNERMINTBYINDEX = "tokenOfOwnerMintByIndex";

    public static final String FUNC_TOKENOFOWNERREQUESTBYINDEX = "tokenOfOwnerRequestByIndex";

    public static final String FUNC_TOKENOFOWNERRESPONSEBYINDEX = "tokenOfOwnerResponseByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_UPDATERESPONSE = "updateResponse";

    public static final String FUNC_UPDATESUPPLY = "updateSupply";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTTRANSFER_EVENT = new Event("RequestTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event RESPONSETRANSFER_EVENT = new Event("ResponseTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SUPPLYTRANSFER_EVENT = new Event("SupplyTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected PDCERC721IpfsManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PDCERC721IpfsManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PDCERC721IpfsManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PDCERC721IpfsManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<RequestTransferEventResponse> getRequestTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTTRANSFER_EVENT, transactionReceipt);
        ArrayList<RequestTransferEventResponse> responses = new ArrayList<RequestTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestTransferEventResponse typedResponse = new RequestTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.datas = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RequestTransferEventResponse> requestTransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RequestTransferEventResponse>() {
            @Override
            public RequestTransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REQUESTTRANSFER_EVENT, log);
                RequestTransferEventResponse typedResponse = new RequestTransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.datas = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RequestTransferEventResponse> requestTransferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTTRANSFER_EVENT));
        return requestTransferEventFlowable(filter);
    }

    public List<ResponseTransferEventResponse> getResponseTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONSETRANSFER_EVENT, transactionReceipt);
        ArrayList<ResponseTransferEventResponse> responses = new ArrayList<ResponseTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ResponseTransferEventResponse typedResponse = new ResponseTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.datas = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ResponseTransferEventResponse> responseTransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ResponseTransferEventResponse>() {
            @Override
            public ResponseTransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONSETRANSFER_EVENT, log);
                ResponseTransferEventResponse typedResponse = new ResponseTransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.datas = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ResponseTransferEventResponse> responseTransferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONSETRANSFER_EVENT));
        return responseTransferEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<SupplyTransferEventResponse> getSupplyTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPPLYTRANSFER_EVENT, transactionReceipt);
        ArrayList<SupplyTransferEventResponse> responses = new ArrayList<SupplyTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SupplyTransferEventResponse typedResponse = new SupplyTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.datas = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SupplyTransferEventResponse> supplyTransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SupplyTransferEventResponse>() {
            @Override
            public SupplyTransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPPLYTRANSFER_EVENT, log);
                SupplyTransferEventResponse typedResponse = new SupplyTransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.datas = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SupplyTransferEventResponse> supplyTransferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPPLYTRANSFER_EVENT));
        return supplyTransferEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PAUSER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOfOwnerMint(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFOWNERMINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOfOwnerRequest(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFOWNERREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOfOwnerResponse(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFOWNERRESPONSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> datasOfToken(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DATASOFTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getRequest(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getResponse(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRESPONSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getRoleMember(byte[] role, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getRoleMemberCount(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBERCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getSupply(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUPPLY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String name, String symbol, String baseTokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseTokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, String datas) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.Utf8String(datas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> response(BigInteger tokenId, String datas) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESPONSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(datas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> senderOfToken(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SENDEROFTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> singerOfToken(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SINGEROFTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> timestampOfToken(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TIMESTAMPOFTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerMintByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERMINTBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerRequestByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERREQUESTBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerResponseByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERRESPONSEBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateResponse(BigInteger tokenId, String datas) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATERESPONSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(datas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSupply(BigInteger tokenId, String datas) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATESUPPLY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(datas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PDCERC721IpfsManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PDCERC721IpfsManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PDCERC721IpfsManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PDCERC721IpfsManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PDCERC721IpfsManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PDCERC721IpfsManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PDCERC721IpfsManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PDCERC721IpfsManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PDCERC721IpfsManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PDCERC721IpfsManager.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PDCERC721IpfsManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PDCERC721IpfsManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<PDCERC721IpfsManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PDCERC721IpfsManager.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PDCERC721IpfsManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PDCERC721IpfsManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RequestTransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;

        public String datas;
    }

    public static class ResponseTransferEventResponse extends BaseEventResponse {
        public String from;

        public BigInteger tokenId;

        public String datas;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class SupplyTransferEventResponse extends BaseEventResponse {
        public String from;

        public BigInteger tokenId;

        public String datas;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
